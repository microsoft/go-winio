//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall"; DO NOT EDIT.

package fs

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")

	procFindFirstFileExW = modkernel32.NewProc("FindFirstFileExW")
	procFindNextFileW    = modkernel32.NewProc("FindNextFileW")
)

func findFirstFileExW(pattern *uint16, infoLevel uint32, data *findData, searchOp uint32, searchFilter unsafe.Pointer, flags uint32) (h windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procFindFirstFileExW.Addr(), 6, uintptr(unsafe.Pointer(pattern)), uintptr(infoLevel), uintptr(unsafe.Pointer(data)), uintptr(searchOp), uintptr(searchFilter), uintptr(flags))
	h = windows.Handle(r0)
	if h == windows.InvalidHandle {
		err = errnoErr(e1)
	}
	return
}

func findNextFileW(findHandle windows.Handle, data *findData) (err error) {
	r1, _, e1 := syscall.Syscall(procFindNextFileW.Addr(), 2, uintptr(findHandle), uintptr(unsafe.Pointer(data)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
